package se.demo.springldapservice.security;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.context.event.EventListener;
import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
import org.springframework.security.authentication.event.AuthenticationFailureLockedEvent;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

/**
 * Listener class for failed login attempts. This will listen to the failure events
 * generated by Spring.
 */
@Slf4j
@Component
public class AuthenticationFailureListener {

    @EventListener
    public void badCredentialsEvent(AuthenticationFailureBadCredentialsEvent event) {
        var user = event.getAuthentication().getPrincipal();
        var maskedPwd = maskPassword(event.getAuthentication());
        log.warn("Bad credentials for user [{}] with masked password [{}]. Does user exist? Is password correct?", user, maskedPwd);
    }

    private String maskPassword(Authentication authentication) {
        var password = (String) authentication.getCredentials();
        log.debug("Unmasked password is [{}]", password);
        return StringUtils.rightPad("X", password.length(), 'X');
    }

    @EventListener
    public void lockedUserEvent(AuthenticationFailureLockedEvent event) {
        var user = event.getAuthentication().getPrincipal();
        log.warn("User [{}] is locked", user);
    }

}
